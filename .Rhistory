plot(c(1,2))
example(persp)
example(lm)
example(persp)
library(RISmed)
res <- EUtilsSummary("community[ti] 2000/01/01[EDAT]:2001/01/01[EDAT]")
fetch <- EUtilsGet(res)
str(res)
fetch <- EUtilsGet(res)
res <- EUtilsSummary("community[ti] 2000/01/01[EDAT]:2000/06/01[EDAT]")
str(res)
fetch <- EUtilsGet(res)
str(fetch)
Author(fetch)[[1]]
Affiliation(fetch)[[1]]
res <- EUtilsSummary("community[ti] 2000/01/01[EDAT]:2000/06/01[EDAT]")
str(re)
str(res)
fetch <- EUtilsGet(res)
str(fetch)
head(fetch)
Affiliation(fetch)[[1]]
Affiliation(fetch)[[10]]
library(RISmed)
res <- EUtilsSummary("community[ti] 2000/01/01[EDAT]:2000/06/01[EDAT]")
res
str(res)
res@id
res <- EUtilsSummary("community[ti]")
str(res)
res <- EUtilsSummary("community[title] Zhong-Yuan Zhang[author]")
str(res)
res <- EUtilsSummary("24247657[uid]")
str(res)
?EUtilsSummary
summary(res)
QueryId(res)
res <- EUtilsSummary("community[title] Zhong-Yuan Zhang[author]")
summary(res)
str(res)
res@country
res <- EUtilsSummary("myeloma[ti]",retmax=10,reldate=365)
str(res)
res@count
res@id
res@querytranslation
fetch <- EUtilsGet(res)
summary(fetch)
str(fetch)
X = numeric()
str(x)
x = numeric()
str(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector()
tt = makeVector()
str(tt)
tt = makeVector(3)
tt
tt = makeVector(c(3,4,6))
tt
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
make.negLogLik
make.NegLogLik
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
tt = make.NegLogLik(c(2,3))
tt
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
function(p) {
+         params[!fixed] <- p
+         mu <- params[1]
+         sigma <- params[2]
+         a <- -0.5*length(data)*log(2*pi*sigma^2)
+         b <- -0.5*sum((data-mu)^2) / (sigma^2)
+         -(a + b)
+     }
+ }
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
tt = make.NegLogLik(c(2,3))
tt
x <- seq(1.7, 1.9, len = 100)
x
y <- sapply(x, nLL)
y <- sapply(x, tt)
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
tt = make.NegLogLik()
y <- sapply(x, tt)
nLL <- make.NegLogLik(normals)
y <- sapply(x, nLL)
nLL
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
tt = makeVector(c(3,2,1))
tt
tt$set
!is.null(tt$getmean)
?is.null
tt$getmean
return(tt$getmean)
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
l = cachemean(c(4,3,2))
cachemean <- function(x,...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
l = cachemean(c(4,3,2))
x = makeVector()
l = cachemean(c(4,3,2))
x
x$getmean()
x$get()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(3,4,1))
cachemean(
)
cachemean()
x = makeVector(c(4,3,2))
cachemean()
cachemean(x)
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x = makeVector(c(4,3,2))
cachemean(x)
x$ge
x$get
x$set
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
t = makeVector)
t = makeVector()
t
t$get(c(3,2))
t$set(c(3,2))
tt = t$set(c(3,2))
tt
t$get(
)
setwd('E:\\公开课\\R语言编程')
source("makeVector.R")
source('cachemean')
source('cachemean.r')
t = makeVector(c(3,2,1))
cachemean(t)
cachemean(t)
cachemean(t)
t = makeVector(c(3,2,10))
cachemean(t)
cachemean(t)
source('cachemean.r')
source('makeVector.r')
t = makeVector(c(3,2,10))
cachemean(t)
cachemean(t)
t = makeVector(c(3,2,10))
t
t$set(c(3,2))
cachemean(t)
t = makeVector(c(3,2,10))
cachemean(t)
t$get()
aa = matrix(c(1,0,0,0,1,0,0,0,1))
aa
aa = matrix(c(1,0,0,0,1,0,0,0,1),nrow = 3)
aa
sorlve(aa)
solve(aa)
t$setmean(3)
t$get()
cachemean(t)
t$setmean(NULL)
cachemean(t)
aa = matrix(c(1,0,0,0,1,0,0,0,1),nrow = 3)
aa
source('cachematrix.r')
setwd('E:\公开课\R语言编程\ProgrammingAssignment2')
setwd('E:\\公开课\\R语言编程\\ProgrammingAssignment2')
source('cachematrix.r')
source('cachematrix.r')
x = makeCacheMatrix(aa)
x
source('cachematrix.r')
x
x = makeCacheMatrix(aa)
x
cacheSolve <- function(x)
cacheSolve(x)
source('cachematrix.r')
cacheSolve(x)
x = makeCacheMatrix(aa)
cacheSolve(x)
x$getSolve()
aa
x = makeCacheMatrix(aa)
x$getSolve(Inver)
x$getSolve()
source('cachematrix.r')
x = makeCacheMatrix(aa)
cacheSolve(x)
source('cachematrix.r')
cacheSolve(x)
source('cachematrix.r')
cacheSolve(x)
source('cachematrix.r')
cacheSolve(x)
source('cachematrix.r')
cacheSolve(x)
source('cachematrix.r')
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
source('cachematrix.r')
cacheSolve(x)
cacheSolve(x)
aa = matrix(c(1,0,0,0,2,0,0,0,1),nrow = 3)
x = makeCacheMatrix(aa)
cacheSolve(x)
cacheSolve(x)
x$setSolve(aa)
cacheSolve(x)
aa
x$set(aa)
x$get()
cacheSolve(x)
